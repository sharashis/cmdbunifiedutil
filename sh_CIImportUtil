var sh_CIImportUtil = Class.create();
sh_CIImportUtil.prototype = {
	initialize: function () {
		this.MSDTABLE = 'u_cmdb_msd_import';
		this.RELTABLE = 'u_cmdbcirelimport';
		this.msg = [];
		this.answer = {};
		this.identifier = '';
		this.INTEGRATIONUSER = 'd6adfaf4db3a8380f16ef1951d961991';
	},

	/**
     * @param {object} Object containing the CI to be inserted
     * @returns {object}  Object contaning the Import Set Name/CI Name/Operation carried out
     */

	importCI: function (payload) {

		try {
			this.identifier = payload.sender_identifier;
			var ciData = payload.data.ci;

			// Check for an empty request
			if (this._isInvalidPayload(payload)) return this._returnError(400,'Please check your payload. Bad Request');

			//loop through the data
			for (var i = 0; i < ciData.length; i++) {
				if (ciData[i].ci_class == 'cmdb_ci_msd') {

					//insert the record in the staging table
					var resultSysID = this._postCIRecord(ciData[i], this.MSDTABLE);

					//Get Import Set Row Object
					var importSetRow = this._getImportSetRow(resultSysID, this.MSDTABLE);

					// Get Import Set Row Status
					var importSetRowStatus = importSetRow.getValue('sys_import_state');

					//Set response based on the import set row status
					this._setResponse(importSetRow, importSetRowStatus);
				}
			}

			this.answer.status_message = this.msg;
			return this.answer;

		} catch (ex) {
			this.answer.http_status = '500';
			this.answer.status_message = 'Internal ServiceNow Error: ' + ex;
			return this.answer;
		}

	},

	/**
     * @param {object} Object containing the CI relationship to be inserted
     * @returns {object}  Object contaning the Import Set Name/Child/Parent/Relationship Name/Operation carried out
     */

	importRelationship: function (payload) {

		try {
			this.identifier = payload.sender_identifier;
			var relData = payload.data.relationships;

			// Check for an empty request
			if (this._isInvalidPayload(payload)) return this._returnError(400,'Please check your payload. Bad Request');

			//loop through the data
			for (var i = 0; i < relData.length; i++) {

				//insert the record in the staging table
				var resultSysID = this._postRelRecord(relData[i], this.RELTABLE);

				//Get Import Set Row Object
				var importSetRow = this._getImportSetRow(resultSysID, this.RELTABLE);

				// Get Import Set Row Status
				var importSetRowStatus = importSetRow.getValue('sys_import_state');

				//Set response based on the import set row status
				this._setResponse(importSetRow, importSetRowStatus);

			}

			this.answer.status_message = this.msg;
			return this.answer;

		} catch (ex) {
			this.answer.http_status = '500';
			this.answer.status_message = 'Internal ServiceNow Error: ' + ex;
			return this.answer;
		}

	},

	/**
     * @param {object} Check if the passed argument is an object or not
     * @returns {boolean}  Returns true/false based on the input
     */

	_isInvalidPayload: function (o) {
		return Object.keys(o).length === 0 && o.constructor === Object;
	},

	/**
     * @returns {object}  Returns a generic bad request error
     */

	_returnError: function (err, msg) {
		this.answer.http_status = err;
		this.answer.status_message = msg;
		return this.answer;
	},

	/**
     * @param {object} row contains the data from current loop iteration
     * @param {string} table contains the name of the table where data has to be inserted
     * @returns {string}  Returns the sys_id of the record in the Import Set Table
     */

	_postCIRecord: function (row, table) {
		var postMSD = new GlideRecord(table);
		postMSD.newRecord();
		postMSD.setValue('u_name', row.name);
		postMSD.setValue('u_correlation_id', row.correlation_id);
		postMSD.setValue('u_discovery_source', row.discovery_source);
		postMSD.setValue('u_company', row.company);
		postMSD.setValue('state','processed');
		var recordSysID = postMSD.insert();
		return recordSysID;
	},

	/**
     * @param {object} row contains the data from current loop iteration
     * @param {string} table contains the name of the table where data has to be inserted
     * @returns {string}  Returns the sys_id of the record in the Import Set Table
     */

	_postRelRecord: function (row, table) {
		var postRel = new GlideRecord(table);
		postRel.newRecord();
		postRel.setValue('u_child', row.child);
		postRel.setValue('u_parent', row.parent);
		postRel.setValue('u_type', row.type);
		postRel.setValue('u_discovery_source', row.discovery_source);
		var recordSysID = postRel.insert();
		return recordSysID;
	},

	/**
     * @param {string} rowID contains the sys_id of the record
     * @param {string} table contains the name of the table where data has to be inserted
     * @returns {string}  Returns the complete row record
     */

	_getImportSetRow: function (rowID, table) {
		var importSetRow = new GlideRecord(table);
		importSetRow.get(rowID);
		return importSetRow;
	},

	/**
     * @param {object} row contains the complete row record gr
     * @param {string} status contains the import set row status(inserted, updated, ignored)
     * @returns {NA}  Sets the answer object to be passed as a response
     */

	_setResponse: function (row, status) {
		var tempObj = {};
		tempObj.name = row.getValue('u_name') || row.getValue('u_parent') + ' ' + row.getValue('u_type') + ' ' + row.getValue('u_child');
		tempObj.importsetname = row.getDisplayValue('sys_import_set');
		tempObj.importsetid = row.getValue('sys_import_set');
		if (status === 'inserted') { // If a record was inserted
			tempObj.state = 'Inserted';
			this.msg.push(tempObj);
			this.answer.http_status = '201';
		} else if (status === 'ignored') { //If a record was ignored
			tempObj.state = 'This record was ignored. Comments : '+row.getValue('sys_import_state_comment');
			this.msg.push(tempObj);
			this.answer.http_status = '200';
		} else if (status === 'updated') { // If a record was updated
			tempObj.state = 'Updated';
			this.msg.push(tempObj);
			this.answer.http_status = '200';
		}
	},

	/**
     * @param {object} data contains the complete incoming payload
     * @returns {string}  recordID contains the sys_id of the mum log record.
     */

	createLogRecord : function(data){
		var attachment = new GlideSysAttachment();

		var rec = new GlideRecord('u_mum_upload_logs');
		rec.initialize();
		var recordID = rec.insert();
		rec.get(recordID);
		var fileName = 'Request_'+data.sender_identifier+'_'+new GlideDateTime() +'.txt';
		var contentType = 'text/csv';
		var content = JSON.stringify(data);

		attachment.write(rec, fileName, contentType, content);
		return recordID;
	},

	/**
	 * @param {string} mumlogid contains the sys_id of the mum log record.
	 * @param {object} body contains the response object.
     * @param {string} importsetid contains the sys_id of the import set record.
     * @returns {NA}  glag indicating 
     */

	updateLogRecord : function(mumlogid, body, importsetid){
		var attachment = new GlideSysAttachment();
		var rec = new GlideRecord('u_mum_upload_logs');
		rec.get(mumlogid);
		rec.setValue('u_import_set',importsetid);
		rec.setValue('u_deployed_by',this.INTEGRATIONUSER);
		var fileName = 'Response'+'_'+new GlideDateTime() +'.txt';
		var contentType = 'text/csv';
		var content = JSON.stringify(body);
		attachment.write(rec, fileName, contentType, content);
		rec.update();

	},

	type: 'sh_CIImportUtil'
};